!function(){"use strict";class e{constructor(e,t,s,r,i){let{name:n,link:o,_id:a,isLiked:l}=e;this.name=n,this.link=o,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this.id=a,this.isLiked=l,this._handleLikeClick=i}_setEventListeners(){this.cardLikeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardDeleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}_checkLike(){if(1==this.isLiked)return this.cardLikeButton.classList.add("card__like-button_active"),this.isLiked}deleteElement(){this._cardElement.remove(),this._cardElement=null}_setCardProperties(){this._cardImage.src=this.link,this._cardImage.alt=this.name,this._cardTitle.textContent=this.name,this._checkLike()}generateCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".cards__card").cloneNode(!0),this.cardLikeButton=this._cardElement.querySelector(".cards__like-button"),this._cardDeleteButton=this._cardElement.querySelector(".cards__delete-button"),this._cardImage=this._cardElement.querySelector(".cards__image"),this._cardTitle=this._cardElement.querySelector(".cards__title"),this._setEventListeners(),this._setCardProperties(),this._cardElement}toggleLike(){this.cardLikeButton.classList.contains("card__like-button_active")?(this.cardLikeButton.classList.remove("card__like-button_active"),this.isLiked=!1):(this.cardLikeButton.classList.add("card__like-button_active"),this.isLiked=!0)}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this.inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this.inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkInputValidity(e){if(this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_showInputError(e){e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_toggleButtonState(){this.inputElements.some(this._hasInvalidInput)?this.disableSubmitButton():this.enableSubmitButton()}_hasInvalidInput(e){return!e.validity.valid}disableSubmitButton(){return this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){return this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}resetFormValidation(){this._toggleButtonState(),this.inputElements.forEach((e=>this._hideInputError(e)))}test(){console.log(this)}clearInputs(){this.inputElements.forEach((e=>{e.value=""}))}}const s={},r=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button");document.querySelector(".modal__input"),document.querySelector("#about_me"),Array.from(document.querySelectorAll(".cards__delete-button")),Array.from(document.querySelectorAll(".modal__box"));let n={};n={name:".profile__name",job:".profile__occupation"};const o=document.querySelector(".profile__avatar-button");class a{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._pageOverlay=document.querySelector(".page"),this._closeButton=this._popupElement.querySelector(".modal__exit"),this._popupBox=this._popupElement.querySelector(".modal__box")}open(){this._popupElement.classList.add("modal_opened"),this._setAltEventListeners()}close(){this._popupElement.classList.remove("modal_opened"),this._unsetAltEventListeners()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close()))}_handleEscClose=e=>{"Escape"==e.key&&this.close()};_handlePageClick=e=>{e.target.classList.contains("modal__box")||this.close()};_handleBoxClick=e=>{e.stopImmediatePropagation()};_setAltEventListeners(){this._pageOverlay.addEventListener("mousedown",this._handlePageClick),document.addEventListener("keydown",this._handleEscClose),this._popupBox.addEventListener("mousedown",this._handleBoxClick)}_unsetAltEventListeners(){this._pageOverlay.removeEventListener("mousedown",this._handlePageClick),document.removeEventListener("keydown",this._handleEscClose),this._popupBox.removeEventListener("mousedown",this._handleBoxClick)}}class l extends a{constructor(e,t){let{handleFormSubmit:s}=t;super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._inputs=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupForm.querySelector(".modal__save"),this._submitButtonOriginal=this._submitButton.textContent}getInputValues(){return this._userData={},this._inputs.forEach((e=>{this._userData[e.id]=e.value})),this._userData}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.id]}))}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this.getInputValues())})),super.setEventListeners()}renderLoading(e,t){this._submitButton.textContent=e?t:this._submitButtonOriginal}}let u="";function c(e){f.open(),u=e}function d(t){const s=new e(t,"#card",h,c,_).generateCardElement();v.addItem(s)}function h(e){L.open(e)}function _(e){e.isLiked?p.unlikeCard(e.id).then((()=>{e.toggleLike()})).catch((e=>{console.log(e)})):p.likeCard(e.id).then((()=>{e.toggleLike()})).catch((e=>{console.log(e)}))}const p=new class{constructor(e){this._options=e,this._baseUrl=this._options.baseUrl,this.isComplete=!1}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}_request(e){return fetch(this._baseUrl+e,this._options).then(this._checkResponse).finally((()=>{this._reset()}))}_reset(){this._options.method="",this._options.body=null}_fetchX=(e,t)=>(this._options.method=t,this._request(e));_sendX=(e,t,s)=>(this._options.method=s,this._options.body=JSON.stringify(t),this._request(e));getCards(){return this._fetchX("/cards","GET")}postCard(e){return this._sendX("/cards",e,"POST")}patchCard(e){return this._sendX("/cards",e,"PATCH")}likeCard(e){return this._fetchX(`/cards/${e}/likes`,"PUT")}unlikeCard(e){return this._fetchX(`/cards/${e}/likes`,"DELETE")}deleteCard(e){return this._fetchX(`/cards/${e}`,"DELETE")}getUserInfo(){return this._fetchX("/users/me","GET")}patchInfo(e){return this._sendX("/users/me",e,"PATCH")}patchAvatar(e){return this._sendX("/users/me/avatar",e,"PATCH")}}({method:"",baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"13f0334e-73a3-4382-9d72-604d6520bb47","Content-Type":"application/json"},body:null}),m=new class{constructor(e,t){let{name:s,job:r}=e;this._profileInfo=document.querySelector(".profile__info"),this._name=this._profileInfo.querySelector(s),this._job=this._profileInfo.querySelector(r),this._avatar=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,source:this._avatar.src}}setUserInfo(e){let{newName:t,newJob:s}=e;this._name.textContent=t,this._job.textContent=s}setAvatar(e){this._avatar.src=e}}(n,"#avatar"),E=new l(".modal",{handleFormSubmit:e=>{let{name:t,about_me:r}=e;E.renderLoading(!0,"Submitting profile changes..."),p.patchInfo({name:t,about:r}).then((()=>{m.setUserInfo({newName:t,newJob:r}),s["profile-form"].disableSubmitButton()})).then((()=>{E.close()})).catch((e=>{console.log(e),E.renderLoading(!0,"Error while changing profile info! Please wait and try again.")})).finally((()=>{E.renderLoading(!1)}))}}),b=new l(".add-popup",{handleFormSubmit:e=>{let{title:t,image_url:r}=e;const i={name:t,link:r};b.renderLoading(!0,"Creating and adding card..."),p.postCard(i).then((e=>{d(e),s["add-photo-form"].disableSubmitButton()})).then((()=>{b.close(),s["add-photo-form"].clearInputs()})).catch((e=>{b.renderLoading(!0,"Error while creating card! Please wait and try again."),console.log(e)})).finally((()=>{b.renderLoading(!1)}))}}),v=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}clear(){this._container.innerHTML=""}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:d},".cards"),g=new l(".avatar-popup",{handleFormSubmit:e=>{let{avatarUrl:t}=e;g.renderLoading(!0,"Changing avatar..."),p.patchAvatar({avatar:t}).then((()=>{m.setAvatar(t),s["avatar-form"].disableSubmitButton()})).then((()=>{g.close(),s["avatar-form"].clearInputs()})).catch((e=>{console.log(e),g.renderLoading(!0,"Error while changing avatar! Please wait and try again")})).finally((()=>{g.renderLoading(!1)}))}}),f=new class extends a{constructor(e,t){let{handleFormSubmit:s}=t;super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this.submitButton=this._popupForm.querySelector(".modal__save"),this._submitButtonOriginal=this.submitButton.textContent}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._handleFormSubmit()}))}renderLoading(e,t){this.submitButton.textContent=e?t:this._submitButtonOriginal}}(".delete-popup",{handleFormSubmit:function(){f.renderLoading(!0,"Deleting..."),p.deleteCard(u.id).then((()=>{u.deleteElement()})).then((()=>{f.close(),u=""})).catch((e=>{console.log(e),f.renderLoading(!0,"Error while deleting! Please wait and try again!")})).finally((()=>{f.renderLoading(!1),s["delete-photo-form"].enableSubmitButton()}))}}),L=new class extends a{constructor(e){super({popupSelector:e}),this._popupPicture=this._popupElement.querySelector("#preview-popup"),this._popupImage=this._popupElement.querySelector("#preview-box").querySelector(".preview-popup__image"),this._popupSubtitle=this._popupElement.querySelector("#preview-box").querySelector(".preview-popup__subtitle")}open(e){let{name:t,link:s}=e;this._popupImage.src=s,this._popupImage.alt=t,this._popupSubtitle.textContent=t,super.open()}}(".preview-popup");var S;p.getCards().then((e=>{v.renderItems(e)})).catch((e=>{console.log("Error while loading cards! Please try again later. "+e)})),E.setEventListeners(),r.addEventListener("click",(function(){E.open(),function(){const{name:e,job:t}=m.getUserInfo();E.setInputValues({name:e,about_me:t})}(),s["profile-form"].disableSubmitButton()})),b.setEventListeners(),f.setEventListeners(),o.addEventListener("click",(function(){g.open()})),g.setEventListeners(),p.getUserInfo().then((e=>{m.setUserInfo({newName:e.name,newJob:e.about}),m.setAvatar(e.avatar)})).catch((e=>{console.log("Unable to load profile/avatar info! Please wait and try again. "+e)})),L.setEventListeners(),i.addEventListener("click",(function(){b.open()})),S={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(S.formSelector)).forEach((e=>{const r=new t(S,e),i=e.getAttribute("name");s[i]=r,r.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,